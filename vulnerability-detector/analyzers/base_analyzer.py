# Base analyzer class
"""
Base analyzer class for vulnerability detection
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any

class BaseAnalyzer(ABC):
    """Base class for all vulnerability analyzers"""
    
    def __init__(self, language: str):
        self.language = language
        self.vulnerabilities = []
    
    @abstractmethod
    def analyze(self, code: str, file_path: str) -> List[Dict[str, Any]]:
        """Analyze code for vulnerabilities"""
        pass
    
    @abstractmethod
    def get_supported_patterns(self) -> List[str]:
        """Get list of supported vulnerability patterns"""
        pass
    
    def _create_vulnerability_report(self, vuln_type: str, line_number: int, 
                                   severity: str, description: str) -> Dict[str, Any]:
        """Create a standardized vulnerability report"""
        return {
            "type": vuln_type,
            "line": line_number,
            "severity": severity,
            "description": description,
            "language": self.language
        }
