# PHP specific analyzer
"""
PHP-specific vulnerability analyzer
"""

import re
from typing import List, Dict, Any
from .base_analyzer import BaseAnalyzer

class PhpAnalyzer(BaseAnalyzer):
    """Analyzer for PHP code vulnerabilities"""
    
    def __init__(self):
        super().__init__("php")
        self.patterns = {
            "sql_injection": [
                r"mysql_query\s*\(\s*.*\$.*\)",
                r"mysqli_query\s*\(\s*.*\$.*\)",
                r"->query\s*\(\s*.*\$.*\)",
            ],
            "xss": [
                r"echo\s+.*\$.*",
                r"print\s+.*\$.*",
                r"printf\s*\(\s*.*\$.*\)",
            ],
            "file_inclusion": [
                r"include\s*\(\s*.*\$.*\)",
                r"require\s*\(\s*.*\$.*\)",
                r"include_once\s*\(\s*.*\$.*\)",
            ],
            "code_injection": [
                r"eval\s*\(\s*.*\$.*\)",
                r"system\s*\(\s*.*\$.*\)",
                r"exec\s*\(\s*.*\$.*\)",
            ]
        }
    
    def analyze(self, code: str, file_path: str) -> List[Dict[str, Any]]:
        """Analyze PHP code for vulnerabilities"""
        vulnerabilities = []
        lines = code.split('\n')
        
        for line_num, line in enumerate(lines, 1):
            for vuln_type, patterns in self.patterns.items():
                for pattern in patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        vuln = self._create_vulnerability_report(
                            vuln_type=vuln_type,
                            line_number=line_num,
                            severity="HIGH" if vuln_type in ["sql_injection", "code_injection"] else "MEDIUM",
                            description=f"Potential {vuln_type.replace('_', ' ')} vulnerability detected"
                        )
                        vulnerabilities.append(vuln)
        
        return vulnerabilities
    
    def get_supported_patterns(self) -> List[str]:
        """Get list of supported vulnerability patterns"""
        return list(self.patterns.keys())
