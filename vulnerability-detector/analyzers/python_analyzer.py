# Python specific analyzer
"""
Python-specific vulnerability analyzer
"""

import re
from typing import List, Dict, Any
from .base_analyzer import BaseAnalyzer

class PythonAnalyzer(BaseAnalyzer):
    """Analyzer for Python code vulnerabilities"""
    
    def __init__(self):
        super().__init__("python")
        self.patterns = {
            "sql_injection": [
                r"execute\s*\(\s*['\"].*%.*['\"]",
                r"cursor\.execute\s*\(\s*['\"].*\+.*['\"]",
                r"\.format\s*\(.*\)\s*\)",
            ],
            "command_injection": [
                r"os\.system\s*\(",
                r"subprocess\.call\s*\(",
                r"eval\s*\(",
                r"exec\s*\(",
            ],
            "path_traversal": [
                r"open\s*\(\s*.*\+.*\)",
                r"\.\.\/",
            ]
        }
    
    def analyze(self, code: str, file_path: str) -> List[Dict[str, Any]]:
        """Analyze Python code for vulnerabilities"""
        vulnerabilities = []
        lines = code.split('\n')
        
        for line_num, line in enumerate(lines, 1):
            for vuln_type, patterns in self.patterns.items():
                for pattern in patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        vuln = self._create_vulnerability_report(
                            vuln_type=vuln_type,
                            line_number=line_num,
                            severity="HIGH" if vuln_type in ["sql_injection", "command_injection"] else "MEDIUM",
                            description=f"Potential {vuln_type.replace('_', ' ')} vulnerability detected"
                        )
                        vulnerabilities.append(vuln)
        
        return vulnerabilities
    
    def get_supported_patterns(self) -> List[str]:
        """Get list of supported vulnerability patterns"""
        return list(self.patterns.keys())
