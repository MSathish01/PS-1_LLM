# Report generation
"""
Report generation module for vulnerability scan results
"""

import json
import csv
import datetime
from typing import List, Dict, Any, Optional
from pathlib import Path

class VulnerabilityReporter:
    """Generate reports from vulnerability scan results"""
    
    def __init__(self, output_dir: str = "data/reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def generate_json_report(self, scan_results: Dict[str, List[Dict[str, Any]]], 
                           output_file: Optional[str] = None) -> str:
        """Generate JSON format report"""
        if output_file is None:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"vulnerability_report_{timestamp}.json"
        
        output_path = self.output_dir / output_file
        
        report = {
            "scan_date": datetime.datetime.now().isoformat(),
            "total_files_scanned": len(scan_results),
            "total_vulnerabilities": sum(len(vulns) for vulns in scan_results.values()),
            "summary": self._generate_summary(scan_results),
            "results": scan_results
        }
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        return str(output_path)
    
    def generate_csv_report(self, scan_results: Dict[str, List[Dict[str, Any]]], 
                          output_file: Optional[str] = None) -> str:
        """Generate CSV format report"""
        if output_file is None:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"vulnerability_report_{timestamp}.csv"
        
        output_path = self.output_dir / output_file
        
        with open(output_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['File', 'Vulnerability Type', 'Line', 'Severity', 'Description', 'Language'])
            
            for file_path, vulnerabilities in scan_results.items():
                for vuln in vulnerabilities:
                    writer.writerow([
                        file_path,
                        vuln.get('type', 'Unknown'),
                        vuln.get('line', 0),
                        vuln.get('severity', 'Unknown'),
                        vuln.get('description', 'No description'),
                        vuln.get('language', 'Unknown')
                    ])
        
        return str(output_path)
    
    def generate_html_report(self, scan_results: Dict[str, List[Dict[str, Any]]], 
                           output_file: Optional[str] = None) -> str:
        """Generate HTML format report"""
        if output_file is None:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"vulnerability_report_{timestamp}.html"
        
        output_path = self.output_dir / output_file
        
        html_content = self._generate_html_content(scan_results)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return str(output_path)
    
    def _generate_summary(self, scan_results: Dict[str, List[Dict[str, Any]]]) -> Dict[str, Any]:
        """Generate summary statistics"""
        severity_counts = {"HIGH": 0, "MEDIUM": 0, "LOW": 0}
        vuln_type_counts = {}
        language_counts = {}
        
        for vulnerabilities in scan_results.values():
            for vuln in vulnerabilities:
                # Count by severity
                severity = vuln.get('severity', 'Unknown')
                if severity in severity_counts:
                    severity_counts[severity] += 1
                
                # Count by vulnerability type
                vuln_type = vuln.get('type', 'Unknown')
                vuln_type_counts[vuln_type] = vuln_type_counts.get(vuln_type, 0) + 1
                
                # Count by language
                language = vuln.get('language', 'Unknown')
                language_counts[language] = language_counts.get(language, 0) + 1
        
        return {
            "severity_breakdown": severity_counts,
            "vulnerability_types": vuln_type_counts,
            "languages_analyzed": language_counts
        }
    
    def _generate_html_content(self, scan_results: Dict[str, List[Dict[str, Any]]]) -> str:
        """Generate HTML content for the report"""
        summary = self._generate_summary(scan_results)
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vulnerability Scan Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f4f4f4; padding: 20px; border-radius: 5px; }}
                .summary {{ margin: 20px 0; }}
                .severity-high {{ color: #d32f2f; font-weight: bold; }}
                .severity-medium {{ color: #f57c00; font-weight: bold; }}
                .severity-low {{ color: #388e3c; font-weight: bold; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
                th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Vulnerability Scan Report</h1>
                <p>Generated on: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
                <p>Total Files Scanned: {len(scan_results)}</p>
                <p>Total Vulnerabilities: {sum(len(vulns) for vulns in scan_results.values())}</p>
            </div>
            
            <div class="summary">
                <h2>Summary</h2>
                <h3>Severity Breakdown:</h3>
                <ul>
                    <li class="severity-high">HIGH: {summary['severity_breakdown']['HIGH']}</li>
                    <li class="severity-medium">MEDIUM: {summary['severity_breakdown']['MEDIUM']}</li>
                    <li class="severity-low">LOW: {summary['severity_breakdown']['LOW']}</li>
                </ul>
            </div>
            
            <h2>Detailed Results</h2>
            <table>
                <tr>
                    <th>File</th>
                    <th>Vulnerability Type</th>
                    <th>Line</th>
                    <th>Severity</th>
                    <th>Description</th>
                </tr>
        """
        
        for file_path, vulnerabilities in scan_results.items():
            for vuln in vulnerabilities:
                severity_class = f"severity-{vuln.get('severity', 'low').lower()}"
                html += f"""
                <tr>
                    <td>{file_path}</td>
                    <td>{vuln.get('type', 'Unknown')}</td>
                    <td>{vuln.get('line', 0)}</td>
                    <td class="{severity_class}">{vuln.get('severity', 'Unknown')}</td>
                    <td>{vuln.get('description', 'No description')}</td>
                </tr>
                """
        
        html += """
            </table>
        </body>
        </html>
        """
        
        return html
