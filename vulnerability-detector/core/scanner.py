# Main scanning logic
"""
Main scanning logic for vulnerability detection
"""

import os
from typing import List, Dict, Any, Optional
from analyzers.python_analyzer import PythonAnalyzer
from analyzers.java_analyzer import JavaAnalyzer
from analyzers.cpp_analyzer import CppAnalyzer
from analyzers.php_analyzer import PhpAnalyzer
from analyzers.llm_analyzer import LLMAnalyzer

class VulnerabilityScanner:
    """Main vulnerability scanner class"""
    
    def __init__(self, use_llm: bool = False):
        self.analyzers = {
            ".py": PythonAnalyzer(),
            ".java": JavaAnalyzer(),
            ".cpp": CppAnalyzer(),
            ".c": CppAnalyzer(),
            ".hpp": CppAnalyzer(),
            ".h": CppAnalyzer(),
            ".php": PhpAnalyzer(),
        }
        
        if use_llm:
            self.llm_analyzer = LLMAnalyzer()
        else:
            self.llm_analyzer = None
    
    def scan_file(self, file_path: str) -> List[Dict[str, Any]]:
        """Scan a single file for vulnerabilities"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File not found: {file_path}")
        
        file_ext = os.path.splitext(file_path)[1].lower()
        
        if file_ext not in self.analyzers:
            return []
        
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            code = f.read()
        
        analyzer = self.analyzers[file_ext]
        vulnerabilities = analyzer.analyze(code, file_path)
        
        # Add LLM analysis if enabled
        if self.llm_analyzer:
            llm_vulns = self.llm_analyzer.analyze(code, file_path)
            vulnerabilities.extend(llm_vulns)
        
        return vulnerabilities
    
    def scan_directory(self, directory_path: str, recursive: bool = True) -> Dict[str, List[Dict[str, Any]]]:
        """Scan all supported files in a directory"""
        results = {}
        
        if recursive:
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    if self._is_supported_file(file_path):
                        try:
                            vulns = self.scan_file(file_path)
                            if vulns:
                                results[file_path] = vulns
                        except Exception as e:
                            print(f"Error scanning {file_path}: {e}")
        else:
            for file in os.listdir(directory_path):
                file_path = os.path.join(directory_path, file)
                if os.path.isfile(file_path) and self._is_supported_file(file_path):
                    try:
                        vulns = self.scan_file(file_path)
                        if vulns:
                            results[file_path] = vulns
                    except Exception as e:
                        print(f"Error scanning {file_path}: {e}")
        
        return results
    
    def _is_supported_file(self, file_path: str) -> bool:
        """Check if file type is supported for analysis"""
        file_ext = os.path.splitext(file_path)[1].lower()
        return file_ext in self.analyzers
    
    def get_supported_extensions(self) -> List[str]:
        """Get list of supported file extensions"""
        return list(self.analyzers.keys())
