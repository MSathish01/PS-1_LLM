"""
Main application entry point for the AI Vulnerability Detection Tool
"""
import sys
import argparse
from pathlib import Path
import json

from core.scanner import VulnerabilityScanner
from core.reporter import ReportGenerator
from ui.web_interface import main as run_web_interface

def main():
    """
    Main CLI interface for the vulnerability detection tool
    Supports both CLI and web interface modes
    """
    parser = argparse.ArgumentParser(
        description="AI-Powered Vulnerability Detection Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python main.py --web                           # Launch web interface
  python main.py --file example.py              # Scan single file
  python main.py --dir /path/to/source          # Scan directory
  python main.py --file example.py --no-llm     # Scan without LLM
  python main.py --file example.py --startup MyCompany  # Custom startup name
        """
    )
    
    # Mode selection
    parser.add_argument('--web', action='store_true',
                       help='Launch web interface (default mode)')
    parser.add_argument('--cli', action='store_true',
                       help='Use command line interface')
    
    # Input options
    parser.add_argument('--file', type=str,
                       help='Path to single file to scan')
    parser.add_argument('--dir', type=str,
                       help='Path to directory to scan')
    parser.add_argument('--recursive', action='store_true', default=True,
                       help='Scan directories recursively (default: True)')
    
    # Analysis options
    parser.add_argument('--no-llm', action='store_true',
                       help='Disable LLM analysis (faster but less accurate)')
    parser.add_argument('--llm-provider', choices=['openai', 'anthropic'], 
                       default='openai', help='LLM provider to use')
    
    # Output options
    parser.add_argument('--output', type=str, 
                       help='Output directory for reports')
    parser.add_argument('--startup', type=str, default='VulnDetector',
                       help='Startup name for reports')
    parser.add_argument('--format', choices=['excel', 'json', 'html', 'all'],
                       default='excel', help='Report format')
    
    # Utility options
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Verbose output')
    
    args = parser.parse_args()
    
    # If no arguments provided or --web specified, launch web interface
    if not args.cli and (not args.file and not args.dir):
        print("🚀 Launching web interface...")
        run_web_interface()
        return
    
    # CLI mode
    if not args.file and not args.dir:
        parser.print_help()
        sys.exit(1)
    
    # Initialize scanner
    use_llm = not args.no_llm
    scanner = VulnerabilityScanner(use_llm=use_llm, llm_provider=args.llm_provider)
    
    # Initialize reporter
    output_dir = args.output or "data/reports"
    reporter = ReportGenerator(output_dir)
    
    try:
        # Perform scan
        if args.file:
            print(f"🔍 Scanning file: {args.file}")
            results = scanner.scan_file(args.file)
            print_cli_results(results, args.verbose)
        else:  # args.dir
            print(f"🔍 Scanning directory: {args.dir}")
            results = scanner.scan_directory(args.dir, recursive=args.recursive)
            print_cli_directory_results(results, args.verbose)
        
        # Generate reports
        print(f"\n📋 Generating reports...")
        
        if args.format in ['excel', 'all']:
            excel_path = reporter.generate_excel_report(results, args.startup)
            print(f"✅ Excel report: {excel_path}")
        
        if args.format in ['json', 'all']:
            json_path = reporter.generate_json_report(results, args.startup)
            print(f"✅ JSON report: {json_path}")
        
        if args.format in ['html', 'all']:
            html_path = reporter.generate_html_report(results, args.startup)
            print(f"✅ HTML report: {html_path}")
        
        print("\n🎉 Scan completed successfully!")
        
    except KeyboardInterrupt:
        print("\n⚠️  Scan interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Error during scan: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

def print_cli_results(results: dict, verbose: bool = False):
    """Print single file scan results to CLI"""
    if results.get('status') == 'error':
        print(f"❌ Error: {results.get('error')}")
        return
    
    print(f"\n📊 Scan Results for {Path(results['filepath']).name}")
    print(f"Language: {results.get('language', 'Unknown')}")
    print(f"Lines of Code: {results.get('lines_of_code', 0)}")
    print(f"Vulnerabilities Found: {results.get('vulnerability_count', 0)}")
    print(f"Risk Score: {results.get('risk_score', 0):.2f}")
    
    vulnerabilities = results.get('vulnerabilities', [])
    if vulnerabilities:
        print(f"\n🚨 Detected Vulnerabilities:")
        
        # Group by severity
        severity_groups = {}
        for vuln in vulnerabilities:
            if vuln.severity not in severity_groups:
                severity_groups[vuln.severity] = []
            severity_groups[vuln.severity].append(vuln)
        
        for severity in ['Critical', 'High', 'Medium', 'Low']:
            if severity in severity_groups:
                print(f"\n{severity} Severity ({len(severity_groups[severity])} issues):")
                for i, vuln in enumerate(severity_groups[severity], 1):
                    print(f"  {i}. Line {vuln.line_number}: {vuln.vulnerability_type}")
                    if verbose:
                        print(f"     CWE: {vuln.cwe_id}")
                        print(f"     Description: {vuln.description}")
                        print(f"     Mitigation: {vuln.mitigation}")
                        print(f"     Code: {vuln.code_line}")
                        print()
    else:
        print("\n🎉 No vulnerabilities detected!")

def print_cli_directory_results(results: dict, verbose: bool = False):
    """Print directory scan results to CLI"""
    print(f"\n📊 Directory Scan Summary")
    print(f"Files Scanned: {results.get('files_scanned', 0)}")
    print(f"Total Vulnerabilities: {results.get('total_vulnerabilities', 0)}")
    print(f"Average Risk Score: {results.get('average_risk_score', 0):.2f}")
    
    # Show breakdown by severity
    severity_summary = results.get('summary', {}).get('by_severity', {})
    if severity_summary:
        print(f"\nVulnerabilities by Severity:")
        for severity in ['Critical', 'High', 'Medium', 'Low']:
            if severity in severity_summary:
                print(f"  {severity}: {severity_summary[severity]}")
    
    # Show most common vulnerability types
    type_summary = results.get('summary', {}).get('by_type', {})
    if type_summary:
        print(f"\nMost Common Vulnerability Types:")
        for vuln_type, count in list(type_summary.items())[:5]:
            print(f"  {vuln_type}: {count}")
    
    # Show high-risk files
    file_results = results.get('file_results', [])
    high_risk_files = [
        f for f in file_results 
        if f.get('status') == 'completed' and f.get('risk_score', 0) > 0.7
    ]
    
    if high_risk_files:
        print(f"\n🚨 High Risk Files (Risk Score > 0.7):")
        for file_result in sorted(high_risk_files, key=lambda x: x.get('risk_score', 0), reverse=True)[:10]:
            filename = Path(file_result['filepath']).name
            risk_score = file_result.get('risk_score', 0)
            vuln_count = file_result.get('vulnerability_count', 0)
            print(f"  {filename}: {risk_score:.2f} ({vuln_count} vulnerabilities)")

if __name__ == "__main__":
    main()
