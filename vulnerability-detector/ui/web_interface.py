# Streamlit web interface
"""
Streamlit web interface for the vulnerability detector
"""

import streamlit as st
import os
import tempfile
from pathlib import Path
import sys

# Add parent directory to path to import modules
sys.path.append(str(Path(__file__).parent.parent))

from core.scanner import VulnerabilityScanner
from core.reporter import VulnerabilityReporter
from core.metrics import AccuracyMetrics

def main():
    """Main Streamlit application"""
    st.set_page_config(
        page_title="Vulnerability Detector",
        page_icon="ðŸ”’",
        layout="wide"
    )
    
    st.title("ðŸ”’ Vulnerability Detector")
    st.markdown("Upload code files or directories to scan for security vulnerabilities")
    
    # Sidebar configuration
    st.sidebar.header("Configuration")
    use_llm = st.sidebar.checkbox("Enable LLM Analysis", value=False)
    scan_recursive = st.sidebar.checkbox("Recursive Directory Scan", value=True)
    
    # Main interface
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("File Upload")
        uploaded_files = st.file_uploader(
            "Choose files to scan",
            accept_multiple_files=True,
            type=['py', 'java', 'cpp', 'c', 'hpp', 'h', 'php']
        )
        
        if uploaded_files:
            if st.button("Scan Files"):
                scan_uploaded_files(uploaded_files, use_llm)
    
    with col2:
        st.header("Directory Scan")
        directory_path = st.text_input("Enter directory path:")
        
        if directory_path and st.button("Scan Directory"):
            if os.path.exists(directory_path):
                scan_directory(directory_path, use_llm, scan_recursive)
            else:
                st.error("Directory does not exist!")

def scan_uploaded_files(uploaded_files, use_llm: bool):
    """Scan uploaded files for vulnerabilities"""
    scanner = VulnerabilityScanner(use_llm=use_llm)
    reporter = VulnerabilityReporter()
    
    with st.spinner("Scanning files..."):
        all_results = {}
        
        for uploaded_file in uploaded_files:
            # Save uploaded file temporarily
            with tempfile.NamedTemporaryFile(mode='wb', delete=False, 
                                           suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            try:
                vulnerabilities = scanner.scan_file(tmp_file_path)
                if vulnerabilities:
                    all_results[uploaded_file.name] = vulnerabilities
            except Exception as e:
                st.error(f"Error scanning {uploaded_file.name}: {e}")
            finally:
                os.unlink(tmp_file_path)
        
        display_results(all_results, reporter)

def scan_directory(directory_path: str, use_llm: bool, recursive: bool):
    """Scan directory for vulnerabilities"""
    scanner = VulnerabilityScanner(use_llm=use_llm)
    reporter = VulnerabilityReporter()
    
    with st.spinner("Scanning directory..."):
        try:
            results = scanner.scan_directory(directory_path, recursive=recursive)
            display_results(results, reporter)
        except Exception as e:
            st.error(f"Error scanning directory: {e}")

def display_results(results, reporter: VulnerabilityReporter):
    """Display scan results"""
    if not results:
        st.success("No vulnerabilities found!")
        return
    
    # Summary metrics
    total_files = len(results)
    total_vulns = sum(len(vulns) for vulns in results.values())
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Files Scanned", total_files)
    with col2:
        st.metric("Vulnerabilities Found", total_vulns)
    with col3:
        severity_counts = {"HIGH": 0, "MEDIUM": 0, "LOW": 0}
        for vulns in results.values():
            for vuln in vulns:
                severity = vuln.get('severity', 'LOW')
                if severity in severity_counts:
                    severity_counts[severity] += 1
        st.metric("High Severity", severity_counts["HIGH"])
    
    # Detailed results
    st.header("Detailed Results")
    
    for file_path, vulnerabilities in results.items():
        with st.expander(f"ðŸ“„ {file_path} ({len(vulnerabilities)} vulnerabilities)"):
            for vuln in vulnerabilities:
                severity_color = {
                    "HIGH": "ðŸ”´",
                    "MEDIUM": "ðŸŸ¡", 
                    "LOW": "ðŸŸ¢"
                }.get(vuln.get('severity', 'LOW'), "âšª")
                
                st.write(f"{severity_color} **{vuln.get('type', 'Unknown')}** "
                        f"(Line {vuln.get('line', 0)}) - {vuln.get('description', 'No description')}")
    
    # Report generation
    st.header("Generate Reports")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("Generate JSON Report"):
            json_path = reporter.generate_json_report(results)
            st.success(f"JSON report generated: {json_path}")
    
    with col2:
        if st.button("Generate CSV Report"):
            csv_path = reporter.generate_csv_report(results)
            st.success(f"CSV report generated: {csv_path}")
    
    with col3:
        if st.button("Generate HTML Report"):
            html_path = reporter.generate_html_report(results)
            st.success(f"HTML report generated: {html_path}")

if __name__ == "__main__":
    main()
